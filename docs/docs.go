// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/v2/deck": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Create deck",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Deck"
                ],
                "summary": "Create deck",
                "parameters": [
                    {
                        "description": "Deck object",
                        "name": "deck",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/domain.Deck"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/views.HTTPResponseVM"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/views.HTTPResponseVM"
                        }
                    }
                }
            }
        },
        "/v2/deck/learning": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get learning decks",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Deck"
                ],
                "summary": "Get learning decks",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/views.HTTPResponseVM"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/views.HTTPResponseVM"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/views.HTTPResponseVM"
                        }
                    }
                }
            }
        },
        "/v2/deck/owned": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get owned decks",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Deck"
                ],
                "summary": "Get owned decks",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/views.HTTPResponseVM"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/views.HTTPResponseVM"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/views.HTTPResponseVM"
                        }
                    }
                }
            }
        },
        "/v2/deck/public": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get public decks",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Deck"
                ],
                "summary": "Get public decks",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/views.HTTPResponseVM"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/views.HTTPResponseVM"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/views.HTTPResponseVM"
                        }
                    }
                }
            }
        },
        "/v2/deck/{id}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get deck by id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Deck"
                ],
                "summary": "Get deck by id",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Deck ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/views.HTTPResponseVM"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/views.HTTPResponseVM"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/views.HTTPResponseVM"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/views.HTTPResponseVM"
                        }
                    }
                }
            }
        },
        "/v2/security/discord": {
            "get": {
                "description": "Redirects the user to the discord login page",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "OAuth"
                ],
                "summary": "Redirects the user to the discord login page",
                "responses": {
                    "302": {
                        "description": "redirecting to github login",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "internal server error",
                        "schema": {
                            "$ref": "#/definitions/views.HTTPResponseVM"
                        }
                    }
                }
            }
        },
        "/v2/security/discord_callback": {
            "get": {
                "description": "Handles the callback from discord",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "OAuth"
                ],
                "summary": "Handles the callback from discord",
                "parameters": [
                    {
                        "type": "string",
                        "description": "code from discord",
                        "name": "code",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "login token",
                        "schema": {
                            "$ref": "#/definitions/views.LoginTokenVM"
                        }
                    },
                    "401": {
                        "description": "invalid credentials",
                        "schema": {
                            "$ref": "#/definitions/views.HTTPResponseVM"
                        }
                    },
                    "500": {
                        "description": "internal server error",
                        "schema": {
                            "$ref": "#/definitions/views.HTTPResponseVM"
                        }
                    }
                }
            }
        },
        "/v2/security/github": {
            "get": {
                "description": "Redirects the user to the github login page",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "OAuth"
                ],
                "summary": "Redirects the user to the github login page",
                "responses": {
                    "302": {
                        "description": "redirecting to github login",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "internal server error",
                        "schema": {
                            "$ref": "#/definitions/views.HTTPResponseVM"
                        }
                    }
                }
            }
        },
        "/v2/security/github_callback": {
            "get": {
                "description": "Handles the callback from github",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "OAuth"
                ],
                "summary": "Handles the callback from github",
                "parameters": [
                    {
                        "type": "string",
                        "description": "code from github",
                        "name": "code",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "login token",
                        "schema": {
                            "$ref": "#/definitions/views.LoginTokenVM"
                        }
                    },
                    "401": {
                        "description": "invalid credentials",
                        "schema": {
                            "$ref": "#/definitions/views.HTTPResponseVM"
                        }
                    },
                    "500": {
                        "description": "internal server error",
                        "schema": {
                            "$ref": "#/definitions/views.HTTPResponseVM"
                        }
                    }
                }
            }
        },
        "/v2/security/login": {
            "post": {
                "description": "Login",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Login",
                "parameters": [
                    {
                        "description": "Login",
                        "name": "login",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/domain.Login"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/views.LoginTokenVM"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/views.HTTPResponseVM"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/views.HTTPResponseVM"
                        }
                    }
                }
            }
        },
        "/v2/security/logout": {
            "post": {
                "description": "Logout",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Logout",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/views.LoginTokenVM"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/views.HTTPResponseVM"
                        }
                    }
                }
            }
        },
        "/v2/security/refresh": {
            "post": {
                "description": "Refresh token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Refresh token",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/views.LoginTokenVM"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/views.HTTPResponseVM"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/views.HTTPResponseVM"
                        }
                    }
                }
            }
        },
        "/v2/security/register": {
            "post": {
                "description": "Register",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Register",
                "parameters": [
                    {
                        "description": "Register",
                        "name": "register",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/domain.Register"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/views.RegisterVM"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/views.HTTPResponseVM"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/views.HTTPResponseVM"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "domain.Card": {
            "type": "object",
            "properties": {
                "answer": {
                    "type": "string"
                },
                "card_type": {
                    "$ref": "#/definitions/domain.CardType"
                },
                "deck_id": {
                    "type": "integer"
                },
                "mcq": {
                    "$ref": "#/definitions/domain.Mcq"
                },
                "mcq_id": {
                    "type": "integer"
                },
                "question": {
                    "type": "string"
                }
            }
        },
        "domain.CardType": {
            "type": "integer",
            "enum": [
                0,
                1,
                2,
                3,
                4,
                5
            ],
            "x-enum-comments": {
                "CardTypeBlankMCQ": "CardTypeBlankMCQ is the blank mcq type of the card",
                "CardTypeBlankOnly": "CardTypeBlankOnly is the blank only type of the card",
                "CardTypeBlankProgressive": "CardTypeBlankProgressive is the blank progressive type of the card",
                "CardTypeMCQOnly": "CardTypeMCQOnly is the mcq only type of the card",
                "CardTypeQAOnly": "CardTypeQAOnly is the qa only type of the card",
                "CardTypeQAProgressive": "CardTypeQAProgressive is the qa progressive type of the card"
            },
            "x-enum-varnames": [
                "CardTypeQAOnly",
                "CardTypeMCQOnly",
                "CardTypeQAProgressive",
                "CardTypeBlankOnly",
                "CardTypeBlankProgressive",
                "CardTypeBlankMCQ"
            ]
        },
        "domain.Deck": {
            "type": "object",
            "properties": {
                "banner": {
                    "type": "string"
                },
                "cards": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/domain.Card"
                    }
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "lang": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "owner_id": {
                    "type": "integer"
                },
                "status": {
                    "$ref": "#/definitions/domain.DeckStatus"
                }
            }
        },
        "domain.DeckStatus": {
            "type": "integer",
            "enum": [
                0,
                1,
                2
            ],
            "x-enum-comments": {
                "DeckStatusPrivate": "DeckStatusPrivate is the private status of the deck",
                "DeckStatusPublic": "DeckStatusPublic is the public status of the deck",
                "DeckStatusToReview": "DeckStatusToReview is the to review status of the deck"
            },
            "x-enum-varnames": [
                "DeckStatusPrivate",
                "DeckStatusToReview",
                "DeckStatusPublic"
            ]
        },
        "domain.Login": {
            "type": "object",
            "properties": {
                "email": {
                    "description": "Email of the user",
                    "type": "string"
                },
                "password": {
                    "description": "Password of the user",
                    "type": "string"
                }
            }
        },
        "domain.Mcq": {
            "type": "object",
            "properties": {
                "answers": {
                    "type": "string"
                },
                "linked": {
                    "type": "boolean"
                }
            }
        },
        "domain.Permission": {
            "type": "integer",
            "enum": [
                0,
                1,
                2,
                3
            ],
            "x-enum-comments": {
                "PermissionAdmin": "PermissionAdmin is the permission level of an admin.",
                "PermissionNone": "PermissionNone is the default permission level.",
                "PermissionUser": "PermissionUser is the permission level of a user.",
                "PermissionVip": "PermissionVip is the permission level of a vip."
            },
            "x-enum-varnames": [
                "PermissionNone",
                "PermissionUser",
                "PermissionVip",
                "PermissionAdmin"
            ]
        },
        "domain.PublicUser": {
            "type": "object",
            "properties": {
                "avatar": {
                    "description": "Avatar of the user",
                    "type": "string"
                },
                "email": {
                    "description": "Email of the user",
                    "type": "string"
                },
                "id": {
                    "description": "ID of the user",
                    "type": "integer"
                },
                "permission": {
                    "description": "Permission of the user",
                    "allOf": [
                        {
                            "$ref": "#/definitions/domain.Permission"
                        }
                    ]
                },
                "username": {
                    "description": "Username of the user",
                    "type": "string"
                }
            }
        },
        "domain.Register": {
            "type": "object",
            "required": [
                "password",
                "username"
            ],
            "properties": {
                "email": {
                    "description": "Email of the user",
                    "type": "string"
                },
                "password": {
                    "description": "Password of the user",
                    "type": "string"
                },
                "username": {
                    "description": "Username of the user",
                    "type": "string"
                }
            }
        },
        "views.HTTPResponseVM": {
            "type": "object",
            "properties": {
                "data": {},
                "message": {
                    "type": "string"
                }
            }
        },
        "views.LoginTokenVM": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "token": {
                    "type": "string"
                }
            }
        },
        "views.RegisterVM": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "user": {
                    "$ref": "#/definitions/domain.PublicUser"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
