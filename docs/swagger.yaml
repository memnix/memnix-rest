definitions:
  domain.Card:
    properties:
      answer:
        type: string
      card_type:
        $ref: '#/definitions/domain.CardType'
      deck_id:
        type: integer
      mcq:
        $ref: '#/definitions/domain.Mcq'
      mcq_id:
        type: integer
      question:
        type: string
    type: object
  domain.CardType:
    enum:
    - 0
    - 1
    - 2
    - 3
    - 4
    - 5
    type: integer
    x-enum-comments:
      CardTypeBlankMCQ: CardTypeBlankMCQ is the blank mcq type of the card
      CardTypeBlankOnly: CardTypeBlankOnly is the blank only type of the card
      CardTypeBlankProgressive: CardTypeBlankProgressive is the blank progressive
        type of the card
      CardTypeMCQOnly: CardTypeMCQOnly is the mcq only type of the card
      CardTypeQAOnly: CardTypeQAOnly is the qa only type of the card
      CardTypeQAProgressive: CardTypeQAProgressive is the qa progressive type of the
        card
    x-enum-varnames:
    - CardTypeQAOnly
    - CardTypeMCQOnly
    - CardTypeQAProgressive
    - CardTypeBlankOnly
    - CardTypeBlankProgressive
    - CardTypeBlankMCQ
  domain.Deck:
    properties:
      banner:
        type: string
      cards:
        items:
          $ref: '#/definitions/domain.Card'
        type: array
      description:
        type: string
      key:
        type: string
      lang:
        type: string
      name:
        type: string
      owner_id:
        type: integer
      status:
        $ref: '#/definitions/domain.DeckStatus'
    type: object
  domain.DeckStatus:
    enum:
    - 0
    - 1
    - 2
    type: integer
    x-enum-comments:
      DeckStatusPrivate: DeckStatusPrivate is the private status of the deck
      DeckStatusPublic: DeckStatusPublic is the public status of the deck
      DeckStatusToReview: DeckStatusToReview is the to review status of the deck
    x-enum-varnames:
    - DeckStatusPrivate
    - DeckStatusToReview
    - DeckStatusPublic
  domain.Login:
    properties:
      email:
        description: Email of the user
        type: string
      password:
        description: Password of the user
        type: string
    type: object
  domain.Mcq:
    properties:
      answers:
        type: string
      linked:
        type: boolean
    type: object
  domain.Permission:
    enum:
    - 0
    - 1
    - 2
    - 3
    type: integer
    x-enum-comments:
      PermissionAdmin: PermissionAdmin is the permission level of an admin.
      PermissionNone: PermissionNone is the default permission level.
      PermissionUser: PermissionUser is the permission level of a user.
      PermissionVip: PermissionVip is the permission level of a vip.
    x-enum-varnames:
    - PermissionNone
    - PermissionUser
    - PermissionVip
    - PermissionAdmin
  domain.PublicUser:
    properties:
      avatar:
        description: Avatar of the user
        type: string
      email:
        description: Email of the user
        type: string
      id:
        description: ID of the user
        type: integer
      permission:
        allOf:
        - $ref: '#/definitions/domain.Permission'
        description: Permission of the user
      username:
        description: Username of the user
        type: string
    type: object
  domain.Register:
    properties:
      email:
        description: Email of the user
        type: string
      password:
        description: Password of the user
        type: string
      username:
        description: Username of the user
        type: string
    required:
    - password
    - username
    type: object
  views.HTTPResponseVM:
    properties:
      data: {}
      message:
        type: string
    type: object
  views.LoginTokenVM:
    properties:
      message:
        type: string
      token:
        type: string
    type: object
  views.RegisterVM:
    properties:
      message:
        type: string
      user:
        $ref: '#/definitions/domain.PublicUser'
    type: object
info:
  contact: {}
paths:
  /v2/deck:
    post:
      consumes:
      - application/json
      description: Create deck
      parameters:
      - description: Deck object
        in: body
        name: deck
        required: true
        schema:
          $ref: '#/definitions/domain.Deck'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/views.HTTPResponseVM'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/views.HTTPResponseVM'
      security:
      - Bearer: []
      summary: Create deck
      tags:
      - Deck
  /v2/deck/{id}:
    get:
      consumes:
      - application/json
      description: Get deck by id
      parameters:
      - description: Deck ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/views.HTTPResponseVM'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/views.HTTPResponseVM'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/views.HTTPResponseVM'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/views.HTTPResponseVM'
      security:
      - Bearer: []
      summary: Get deck by id
      tags:
      - Deck
  /v2/deck/learning:
    get:
      consumes:
      - application/json
      description: Get learning decks
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/views.HTTPResponseVM'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/views.HTTPResponseVM'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/views.HTTPResponseVM'
      security:
      - Bearer: []
      summary: Get learning decks
      tags:
      - Deck
  /v2/deck/owned:
    get:
      consumes:
      - application/json
      description: Get owned decks
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/views.HTTPResponseVM'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/views.HTTPResponseVM'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/views.HTTPResponseVM'
      security:
      - Bearer: []
      summary: Get owned decks
      tags:
      - Deck
  /v2/deck/public:
    get:
      consumes:
      - application/json
      description: Get public decks
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/views.HTTPResponseVM'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/views.HTTPResponseVM'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/views.HTTPResponseVM'
      security:
      - Bearer: []
      summary: Get public decks
      tags:
      - Deck
  /v2/security/discord:
    get:
      consumes:
      - application/json
      description: Redirects the user to the discord login page
      produces:
      - application/json
      responses:
        "302":
          description: redirecting to github login
          schema:
            type: string
        "500":
          description: internal server error
          schema:
            $ref: '#/definitions/views.HTTPResponseVM'
      summary: Redirects the user to the discord login page
      tags:
      - OAuth
  /v2/security/discord_callback:
    get:
      consumes:
      - application/json
      description: Handles the callback from discord
      parameters:
      - description: code from discord
        in: query
        name: code
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: login token
          schema:
            $ref: '#/definitions/views.LoginTokenVM'
        "401":
          description: invalid credentials
          schema:
            $ref: '#/definitions/views.HTTPResponseVM'
        "500":
          description: internal server error
          schema:
            $ref: '#/definitions/views.HTTPResponseVM'
      summary: Handles the callback from discord
      tags:
      - OAuth
  /v2/security/github:
    get:
      consumes:
      - application/json
      description: Redirects the user to the github login page
      produces:
      - application/json
      responses:
        "302":
          description: redirecting to github login
          schema:
            type: string
        "500":
          description: internal server error
          schema:
            $ref: '#/definitions/views.HTTPResponseVM'
      summary: Redirects the user to the github login page
      tags:
      - OAuth
  /v2/security/github_callback:
    get:
      consumes:
      - application/json
      description: Handles the callback from github
      parameters:
      - description: code from github
        in: query
        name: code
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: login token
          schema:
            $ref: '#/definitions/views.LoginTokenVM'
        "401":
          description: invalid credentials
          schema:
            $ref: '#/definitions/views.HTTPResponseVM'
        "500":
          description: internal server error
          schema:
            $ref: '#/definitions/views.HTTPResponseVM'
      summary: Handles the callback from github
      tags:
      - OAuth
  /v2/security/login:
    post:
      consumes:
      - application/json
      description: Login
      parameters:
      - description: Login
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/domain.Login'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/views.LoginTokenVM'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/views.HTTPResponseVM'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/views.HTTPResponseVM'
      summary: Login
      tags:
      - Auth
  /v2/security/logout:
    post:
      consumes:
      - application/json
      description: Logout
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/views.LoginTokenVM'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/views.HTTPResponseVM'
      summary: Logout
      tags:
      - Auth
  /v2/security/refresh:
    post:
      consumes:
      - application/json
      description: Refresh token
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/views.LoginTokenVM'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/views.HTTPResponseVM'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/views.HTTPResponseVM'
      summary: Refresh token
      tags:
      - Auth
  /v2/security/register:
    post:
      consumes:
      - application/json
      description: Register
      parameters:
      - description: Register
        in: body
        name: register
        required: true
        schema:
          $ref: '#/definitions/domain.Register'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/views.RegisterVM'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/views.HTTPResponseVM'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/views.HTTPResponseVM'
      summary: Register
      tags:
      - Auth
swagger: "2.0"
