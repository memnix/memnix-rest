// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: user.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (email, password, username) VALUES ($1, $2, $3) RETURNING id, email, password, created_at, updated_at, deleted_at, username, oauth_id, oauth_provider, has_oauth, avatar, permission
`

type CreateUserParams struct {
	Email    string
	Password string
	Username pgtype.Text
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Email, arg.Password, arg.Username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Username,
		&i.OauthID,
		&i.OauthProvider,
		&i.HasOauth,
		&i.Avatar,
		&i.Permission,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, email, password, created_at, updated_at, deleted_at, username, oauth_id, oauth_provider, has_oauth, avatar, permission FROM users WHERE id = $1
`

func (q *Queries) GetUser(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Username,
		&i.OauthID,
		&i.OauthProvider,
		&i.HasOauth,
		&i.Avatar,
		&i.Permission,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, password, created_at, updated_at, deleted_at, username, oauth_id, oauth_provider, has_oauth, avatar, permission FROM users WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Username,
		&i.OauthID,
		&i.OauthProvider,
		&i.HasOauth,
		&i.Avatar,
		&i.Permission,
	)
	return i, err
}

const getUserName = `-- name: GetUserName :one
SELECT username FROM users WHERE id = $1
`

func (q *Queries) GetUserName(ctx context.Context, id int32) (pgtype.Text, error) {
	row := q.db.QueryRow(ctx, getUserName, id)
	var username pgtype.Text
	err := row.Scan(&username)
	return username, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users SET email = $1, password = $2, username = $3 WHERE id = $4 RETURNING id, email, password, created_at, updated_at, deleted_at, username, oauth_id, oauth_provider, has_oauth, avatar, permission
`

type UpdateUserParams struct {
	Email    string
	Password string
	Username pgtype.Text
	ID       int32
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.Email,
		arg.Password,
		arg.Username,
		arg.ID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Username,
		&i.OauthID,
		&i.OauthProvider,
		&i.HasOauth,
		&i.Avatar,
		&i.Permission,
	)
	return i, err
}
